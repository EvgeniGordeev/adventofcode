#!/usr/bin/env python3

# HELPER FUNCTIONS
import math
import re
from typing import Callable


def parser(text) -> list:
    return [line for line in text.strip().replace(' ', '').split('\n')]


def read_input() -> str:
    with open(__file__, "r") as f:
        c = f.read()
        data = c[c.rindex("🎅") + 1: c.rindex("⛄")].rstrip()
    return data


# MAIN FUNCTIONS
def _calc_same_precedence(expr, i=None) -> int:
    nested = True
    if i is None:
        nested = False
        i = [0]
    n, a, b, op = len(expr), None, None, None
    while i[0] < n:
        nxt = expr[i[0]]
        if nxt.isdigit():
            if a is None:
                a = nxt
            elif b is None:
                b = nxt
        elif nxt in ('*', '+'):
            if op is None:
                op = nxt
        elif nxt == '(':
            if a is None:
                i[0] += 1
                a = _calc_same_precedence(expr, i)
            elif b is None:
                i[0] += 1
                b = _calc_same_precedence(expr, i)
        elif nxt == ')':
            if nested:
                break
        if a is not None and b is not None and op is not None:
            a, b, op = eval(str(a) + op + str(b)), None, None
        i[0] += 1
    return a


def _calc_reverse(expr, i=None) -> int:
    nested = True
    if i is None:
        nested = False
        i = [0]
    n, a, b, op, mult = len(expr), None, None, None, list()
    while i[0] < n:
        nxt = expr[i[0]]
        if nxt.isdigit():
            if a is None:
                a = int(nxt)
            elif b is None:
                b = int(nxt)
        elif nxt in ('*', '+'):
            if op is None:
                op = nxt
        elif nxt == '(':
            if a is None:
                i[0] += 1
                a = _calc_reverse(expr, i)
            elif b is None:
                i[0] += 1
                b = _calc_reverse(expr, i)
        elif nxt == ')':
            if nested:
                break
        if a is not None and b is not None and op is not None:
            if op == '+':
                a, b, op = a + b, None, None
            else:
                mult.append(int(a))
                a, b, op = b, None, None
        i[0] += 1
    if len(mult) > 0:
        mult.append(int(a))
        a = math.prod(mult)
    return a


def _eval(x):
    return str(eval(x.group()))


def _calc_reverse_re(expr) -> str:
    formula = re.sub(r'(\d+(\+\d+)+)', _eval, expr)
    formula = re.sub(r'\(\d+(\*\d+)+\)', _eval, formula)
    formula = re.sub(r'\(\d+\)', _eval, formula)
    if '+' in formula:
        return _calc_reverse_re(formula)
    return eval(formula)


def part1(lines, calc_func: Callable = _calc_same_precedence) -> int:
    res = 0
    for line in lines:
        res += calc_func(line)

    return res


def part2(lines) -> int:
    return part1(lines, _calc_reverse)


# regex version
def part2_re(lines) -> int:
    return part1(lines, _calc_reverse_re)


# TEST
def test() -> bool:
    # part1
    assert part1(parser("2 * 3 + (4 * 5)")) == 26
    assert part1(parser("1 + 2 * 3 + 4 * 5 + 6")) == 71
    assert part1(parser("1 + (2 * 3) + (4 * (5 + 6))")) == 51
    assert part1(parser("5 + (8 * 3 + 9 + 3 * 4 * 3)")) == 437
    assert part1(parser("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2")) == 13632
    # part2
    assert part2(parser("1 + 2 * 3 + 4 * 5 + 6")) == 231
    assert part2(parser("2 * 3 + (4 * 5)")) == 46
    assert part2(parser("1 + (2 * 3) + (4 * (5 + 6))")) == 51
    assert part2(parser("5 + (8 * 3 + 9 + 3 * 4 * 3)")) == 1445
    assert part2(parser("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))")) == 669060
    assert part2(parser("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2")) == 23340
    return True


if __name__ == '__main__':
    assert test()

    model = parser(read_input())
    # ONE #1
    part_1 = part1(model)
    print(part_1)
    assert part_1 == 464478013511
    # # TWO #2
    part_2 = part2(model)
    print(part_2)
    assert part_2 == 85660197232452

# INPUT
"""🎅
8 + ((9 * 7) + 2) + (4 * (9 * 3 * 9 + 3 + 8) + 6 + 5 + 8)
7 + 5 * 3 + (9 * 9 * 3)
4 * (4 * 8 + 3 + 4 * 2 + (8 + 2 * 6 + 6)) + (6 + 9 + 8) * 8 + (6 + 6 * (2 * 9) * 3 + (9 * 3 * 5 * 4) * 7)
((4 * 3) * 2 * 2) * 4 * 5 * 5 * 7 * ((3 * 3 + 6 * 8) * 7 * 3 * 9 + (7 * 6 + 9) * (4 * 3))
8 + 6 + 9 + ((8 * 2 + 7 + 9 * 7) * 6 * 9 + (8 * 2) * 5 * 2) + 9
(9 + 8 + 4 * 9 * 9) * 9 + 8 * (2 * (7 * 2) + 8) * 2
5 * 9 + 6 * 3 + (5 * 7 * 5 + 4 * 8 + 4)
((7 * 9 * 3 * 8 * 6 * 6) * (9 * 2 + 4 * 3) + 9 * 3) * 2
2 + ((8 + 3 + 6 * 6 + 5 + 9) * 4 * 7 + 6 * 4 + (6 + 8 * 5 * 9 + 3)) + 9 + 7 * 7
((7 * 9 * 5) + 9 * (8 + 2)) + 2
3 * 6 * 8 * (9 + 5 * 8 + 4 * 8) + 8
9 + 8 * (3 + 9 + (3 * 7) * 3 * 4)
((6 + 8 + 5 * 3 + 7) + (5 + 6) * 8) + 9 + 2
(5 * (3 * 2 * 4 + 9 + 5)) * 8 + 5
(8 * 2 * 5 * 4 * 3) + 5 + (3 * (6 + 8 * 8)) * 3
4 * 5 + (9 * 3) + (7 * 9 * 3 * 7 * 6) + 4
6 + 2 * 2 + 8 + (3 + 4 + (4 + 2 + 7 + 5) * (3 + 8 + 7 * 9 * 2)) * 2
(3 * 5 + 3 + (6 * 4 + 3) + (4 * 4 * 9) + 7) * 3 + 8 + (5 + 2 * 7 + 2) * 3 * 7
6 * 7 + (2 * 7 + 9 * 2 + (3 + 6 + 6 + 9) + (7 + 8)) + 6 * 8 + 6
8 * (6 * 8 + 3) * 8
(6 * 4 + (8 * 8) + 5 * 6) * 5 * 8 * 5
8 * (3 * 6 * (7 + 5 + 8 * 6 + 5)) * 2 + 4
(7 + (8 * 3) * 5 + 8) * 8 * ((5 * 9 * 3 * 8) * 7 * (3 + 2 + 6 + 9) * 2 * 3 * 9) + 2
(4 + 5 + 5) * (6 + (6 * 5 + 3) * (8 * 6 * 6 + 8 + 6)) * 2 + 4 + 3 * 8
5 + 6
6 + 5 * (6 + 3 + 5 + 5 * 2) * 5 + 3 * 9
3 * 7 + (8 * 2 * 4 * 2) * 4 * 3 + 9
(2 + (5 * 5 * 6 * 8 + 7) + 8 * 5 + 9) + (8 + 4 * 4 + 9 * 4 * 6) + 8 * 6
(3 * 3 + 5) * 6 * 6 * (7 * (4 * 3 + 4))
7 + (9 * 4) + ((3 * 2 * 7 + 8 + 4 + 2) * 4 * 3 + (9 + 5 + 6 * 5 + 5) * 4) * (8 + (7 + 9 + 3 * 2 + 8) * 8 * 6 * 3)
9 + 7 + ((5 + 3 * 4 + 9) * 4 + 7 * 9 * (7 + 7)) * 6 + 6 * (6 + 6 + (6 * 7 + 7 + 4) + (6 + 2 * 6 + 3 * 5) * 6 * 8)
5 + (9 + 5 + (9 * 8 * 5) + 3 * 5) * 7 + 7
(9 * 5 + 3 * (9 * 4) + 7) * 2 + 9 * 9 * 8
9 * 5 * (6 * 6 * 7 + (5 + 4 + 3 + 8 + 3) + (7 * 9)) * (4 * 7 * 4 + 4 * (2 + 2 * 8 * 6 + 9 + 4) * (8 + 8 * 6)) + 9 * 4
7 + 3 + ((7 * 9 + 9 * 3 + 3 + 2) + 6 + 7) * 6
7 + 7 * (9 * (2 * 4 * 7) * 2 + (2 + 5 + 4 + 7 + 5)) * (5 + 7 + 4 * (3 * 4) + 7)
4 + (9 + 3 + (5 + 4 + 6 + 4) + 3 + 3)
(5 * (6 * 6 * 8 + 8 * 9 * 8) * 5 + 2) * 3 + 5 + (6 + 3 + 5)
(5 * 3 * 6) + (6 + (9 + 3 + 9 + 6 * 2 * 4) + 6 + 3 * 9) * 2 * 8 * (3 * 2 * 2 + 6 + 3 + 8)
8 + 6 + 8 + 6 + ((8 * 4 * 7 + 8 * 4) * 4 * 8 + 5)
(8 * 8 + (9 * 2 * 6 * 3 * 5 + 7) + 6 + 9 * 8) * 5 * 8 * 2 * (8 + 8 * 9 * 9) + (9 * (6 * 8 + 9 * 3 * 4 * 5) + 8 + (8 + 5 + 4 * 6) * (8 * 8))
(8 * (4 + 3 * 8 * 2 + 6 + 9) * 5 * 7) + 4 * (2 + 4) + 5 + 7 + 9
3 * 4 * 9 + 7 * (2 * (7 * 6 + 5 + 2 + 5 + 8) * (6 + 8)) + (7 * (5 + 8 + 2 * 7) + 4 + (7 * 4 + 5 + 4 * 3) + 7 * 7)
((9 + 6 * 7 + 8 + 5 * 3) * 8 + 3 * 7) + 8 + 3 + 4 * 5 * ((6 * 7 + 2 + 4 * 4) * 9 + 6 * 4 + (9 + 8) * (6 * 4 * 2))
(6 + 6 * 3 * 4) + 2 * (5 * (8 * 8) * 8 * (8 + 6 * 6 + 3 * 9) * 3) + ((8 + 5) * 7 + 6 + 9 + 6) + 8
(3 + (5 + 7 * 2 * 5 + 3) + 2 + (5 * 4 * 2 + 9 * 3) * 4) + 9 * 2
(3 * 8 * 2) + 6
7 + 3 * (8 + 8 + 9 * (6 + 7) * 7)
5 + 2 * 2 + (4 + 4 * 2 + 2 + 2 + 4) * 4 + 6
7 * ((6 + 7 + 6 * 8 + 4 + 3) * 6 + 9 * 7 + (5 + 4 * 7 * 7)) * 9
((9 * 7) * 9) * 7 + 9 * 3 + 3 + 2
2 + 9 * (5 * 4 * 6 * (5 * 4 + 4 * 2 * 6 * 3) * (2 + 5 + 5 * 9)) + 5
8 * 3 * 8 * ((7 * 3 + 8) * 6 * 8 * 9 + (3 + 9 + 9 * 2 * 3) * (7 * 2 * 5 + 9 * 3))
6 * (6 * 5 + 6 + 5 * 9 * 7) + 2 * (7 + 3 * 3 * 7 + 4) + 3 + 8
4 + (8 * 5 * 7 * (7 + 8 + 6) * 6) + 4 + (2 * 6 * 5 * 4) + ((8 + 6 + 7 + 3) + (3 * 3 * 8 * 5) + (3 + 3 + 2))
2 * 5 + 4 + 7 * (7 + 8 * 5 + 9 * 3 * 7) * 6
3 * 6 + ((7 * 7 * 9 * 9 * 6 * 6) + 2 * (8 * 6 + 5 + 2 + 5) + 7 * (7 * 8 * 2 + 6 + 2 + 8) + (9 * 3 + 2 + 8 + 9)) * 4
3 * 2 * 8 * (7 * 4 + (6 + 9 + 3 + 7 * 2))
(7 * 6 * (2 * 4) * (2 * 5) * 8 * 4) + 6 * 9 + 7 + 5 + 4
((8 * 6 + 2 + 9 * 4 * 7) * 2 * 6 * (6 * 5 * 7)) * 5 * (3 * (5 * 3 + 4) + 6 * 5 + 8) + 6
5 + 7 + 2 + 7 + (5 * 3)
((3 + 2 * 9 * 5 + 9) + 9 + (3 + 8 * 6 + 8) + 8) + 6 + 8 + 4 * 8 * ((2 + 3 + 9 + 6 + 4 * 7) * 6 * 8 * 6)
9 * 5 * 7 + 8
9 * 9 + 2 + 7 + (8 + 9 * 9 + 3) + 2
9 + ((3 * 7 * 4 + 8) + (7 + 2 + 2 * 7 + 2 + 4) + 7 * 7 + 6) * (3 * (6 * 7 * 3 + 8) + 4 + (7 + 4 + 4 + 9) + (3 + 8 * 4) + 7) * 2 + 9
3 + (5 + (9 * 4 + 5 + 4 + 3) * 4 * (7 * 6) + 6) * 5 * 9 + 9
7 + (9 * (2 + 8 * 8 + 5) * 2 + 7) * 6 + 2 + 4 + 2
(6 + (9 * 4 + 7 + 8 + 5)) + 3
8 * 8 * 9
6 + 5 * ((2 * 4) * (6 * 6 * 9 * 6) * 4 + 2 * 3 * 2) * 2 + 8
8 + 5 * (9 + 6) * (2 * (6 + 3 + 7 * 2 + 7) * 7)
4 * (7 * 5 + 6 * 4) * 2
(4 + (8 + 3 * 5 * 6) * 2 * 4) + 4
9 * 6 * 2 + 5
2 + (6 * 9 + 6 + (8 + 4 * 6) * 6 * 3) * 9 * 9 * 3
7 * ((9 + 8 + 9) * 8 + 2) + 5 * 4 * 6
8 * ((2 * 9 * 9 * 4) + 9 * 9 * 5 + 9) + 7
((9 + 5 * 7 + 2 * 4 + 8) + 4) + 6 + 9 + 8 * 5
(2 * 9) * 7 + (3 * 7 * 6 + 6) * 2 * 2 + (4 + 8 + (2 + 8))
((4 * 2) * 2 + 2 + 6) + 6
(6 * 9 * 8 + 8 * 6) + 8 * (8 + 8 * 4 + 4)
((2 * 2 * 2) + 6 * 6 + 8 * 2 + 3) * 2 * (9 + 3 + (3 * 9 * 5 + 2 * 6 + 6) + (3 * 2 * 8 + 9 + 6 + 7)) * ((5 * 2 * 2 + 6 + 4 * 2) + (8 + 8 * 5 * 7) + 8) + 9
9 + (8 * 4 * 9 * (9 * 6 * 8 * 9)) * 9 + 3 * 5
8 + 4 + 2 * ((8 + 5 * 8 + 2) + 9 * (7 * 7 + 7 + 2 * 6) * (6 + 6) * 2 * 8)
(6 + (8 * 4) * 7 + 3 * (4 * 5 + 8 * 5) + 5) + 7 * (7 + 9 * (8 * 5 * 6 * 9 + 6 * 7) + 9 * 4)
6 * 3 * 3 + (3 * 6 * 9 * (3 * 9 * 7) * (5 * 4 * 4) + 5) + ((2 * 9) * 3) + 5
(4 + 8) + 3 + 4 + 3 * 7 + 4
(6 * 3 + (5 * 3 + 9 + 4 + 5)) + (7 + 8 + 2 * (4 * 7 * 6 * 7 * 8 + 7)) * 5
(7 + (8 + 4) + 4 * (2 + 8)) + 4 * 5 + 2 * 9 * (5 + 9 + 6 + 4 + 6 + 8)
((6 * 4 + 6 + 7) * 5 * 2 * 2 + 2) + (2 + 5 * 7 + 2) + 6 + 4 * 7
(6 + 2 + 2 + 5) * 6 + 3 * 7 + (8 + 9 * (7 + 7 * 5) + 3) + 8
(3 + (7 * 3 * 6 * 3 + 7) + 2 + 2 + 8 + (7 + 2 * 6 + 6 + 4)) * 5 + 5 * 3 * 6 + 6
6 * (6 + (4 + 2 + 6 * 3) + 2 + (6 + 6) + 8) * 3
(9 + 9 + 6 * (6 + 7 * 2) + (2 * 2 * 8 * 3) * 3) + (5 + (2 * 6 + 9 * 4 * 4 * 7) * 5 * 7 + 9) + 6
((7 + 5 + 9) + 9 + 3) * (2 + 9 + 8 + 4 * 2 * 6) * ((5 + 2 + 8) * (8 + 8 * 7) + 7 + (4 + 6) * (9 * 3 * 8 + 9) + 8) * 9
5 * 4 + 5 + ((5 + 4 + 7 * 8 * 4) + 6 + 4 + 2 * 6)
5 + 7 + 7 * 2 + 7
(5 * 4) * 2 * (4 + 3 * (2 + 6) + 3 * (8 * 6 * 7)) * 4
4 * (4 * 8 * (4 * 6 + 4 * 5 + 2) * (2 + 5) * 7 * 8) * 7 + 8
9 + 9
9 + 8 * 3 * 8 + ((7 * 3 * 3) * 2) + 6
4 * (3 * 5 * 3 * (2 * 4)) + 3 + ((8 + 5) * 3 * 9 * 4) * 7 + 2
(7 * 2) * 2 * 7
4 * 8 * 2 + 2 + 9 + 2
5 * (6 + 8 + 7 * 3 + 7 * (9 + 2 + 3 + 6 + 6 * 6)) * 8 * ((7 + 4 * 8 * 5 + 7) + 2 * 5)
7 + (3 + (7 + 2 * 9) * 3 * 2 + 7 * 7) + 5
5 * ((7 * 8 * 2) + 2 * 5 + 9 * 8) * 3
(7 * 5 + 9) * 4 * 2 * 7 * 8 * 3
9 * 7 + (6 * 3 * 4 * (4 + 7 * 5 * 4 + 9) + 7) + 3 * 3
(3 * 5 * 6 * 5) + 2 + 3 * (8 * 5 * 8 * 2) + 4
4 + 2 * ((4 * 2 + 3 + 6 + 4 + 6) * 8)
7 + (5 * 8) * 4 * (7 + (7 + 4) * 6)
4 + 5 + 3 + (3 + 4 + 5 * 3) * 9
((3 + 4 * 4 * 9) * 7 + 4) * 7 + 8
7 + 5 * 2 + (7 * 5) * 5
2 + 8 * 5 * 4 * 9 + (5 * 8 + 4 + 8 * 2)
(4 * 9 * 7 * 9) * ((5 + 4 * 7 + 8) + 9 + 7 * 7 + 9 + 8) + 9 * 7 * 5
(8 + (3 * 7 + 8 + 6 + 5) + 2 + 8 * 8) + 9
2 + (6 * 9) * (2 + 6 * 2 * 5 * 9) + 4
4 + (4 * 2 + 4 + 8 * 8 * 4) * 6 * 4 * 5 * (4 * 5)
(2 * 5 + 5 * 9) * 7 * 4 * (6 + 2 * 5 + 2 + (5 * 2 * 7) + (6 + 9)) * 9 + 4
4 * 9 * (2 + (5 + 2 + 6 * 6) + 4 + 4 * (2 + 9 * 8))
8 + 2 + 5 + 8 * (3 * (7 * 3 + 2) * 9) + 3
7 * 6 * 6 * 5 + 4 * 6
2 + 9 * (4 * 3 * 2 + 5) + 2 + (4 + 5) * 4
((5 + 4 * 4) * 7 + 7) * 3 + 6 + 5 * 2 + 8
9 * ((5 + 8 + 5 * 6 + 5) + 5 + 3 * (3 + 5) * 2) + (2 + 6 + 4 * (5 + 4 + 5 + 5 + 5)) * (8 * 9)
6 + 4 + 7 * 8 * 4 + 3
((5 * 9 * 4 + 9 + 6) + 5 + 8 + 2 + 6 * 5) * 8 * 9 * 4 + 8 + 4
(8 + 9 + (9 + 6 + 2 * 2)) + 5
(8 + 3 + 5 * (8 + 4)) * (4 + 6 * 4 * (3 * 4) * 5) * 4 * 8 * 7
9 + 2 + (6 * 7 * (3 * 9 + 7 + 9 + 8 * 9) + 7 + 2) + 2 * 5
3 + (2 + 6 + (3 + 3 * 2 + 8 * 7) + 5) * 3
((4 * 4 * 6 * 2 * 2) + 9 * 6) * 2
(4 + 6 + 2 + 7) + 8
(4 + 7 * (9 * 6 * 8) + 3 + 4 * 6) * 2 + 3 + 2 * 7 * 6
(4 * 6 + 2 + (9 * 2 + 5 * 7) * 9) + 8 + (7 * (5 + 8 * 8 + 4)) * (5 + 4 + 3 + 3) + 8
5 + 2 + 6 * 8 * (5 + 3) * (9 + 7 + 3 + (2 * 5 * 4 * 7 + 7 * 6) + 8)
7 + 3 + 4 * (9 * (6 + 4 * 7 * 5 * 3) + 2 * 6)
5 + 3 * 4 + 3 + (7 + (2 * 5 + 8 * 6 + 9) + (2 + 8 + 6 + 8))
2 + (2 + 7 * 6 * 8) * 7 * 5 + 3 + 8
9 * 9 * 5 * ((4 + 9 + 2) * 7) * (2 + 3 + 4)
7 * (3 + (5 + 4 + 4 * 2) * 9 + 2 + 2) + 9 * (2 * 9 * 5 * 7 + 9 + 7) + 9
9 * (6 + (6 + 9 * 8) + 6 + 2 * (3 * 8 * 8 + 9 + 6 * 8)) * 8 * 8 * 3 * 9
4 * (5 * 8 * 3 * 3)
(2 * (2 * 4 + 6 * 7 + 2) + 8 + 8) + 4 * 6 + (2 * 6 + 6 + 6 + 2 * 4) + 6
7 + (2 + 7 + 2 * 7 * 4)
(9 + (2 * 2)) + 7 * 8
3 + (4 + 8 * 9 * (7 + 4 + 3 * 5 + 4 * 7) * 4) * 4 + 6 + 7 + 9
2 * (3 * 9 + 5 * (7 + 4 * 2 + 4 * 6) * 6 + 4) * 7 + (2 + (3 + 8)) + 3 * 2
((6 + 8) + 6 + 6) + 2 * 3 + (8 + (2 * 3) * (8 + 9))
8 * 9 + (5 + 3) * 4 + 4 + 9
7 * 9 * (7 * 8 + 8 * 2 + (9 + 8 * 9) * 8) * 4 + 2 + 6
6 * 4 * 9 * 3 + 2 * 8
4 * 4 * 8 * (7 * 7 * 6) * 2 * 4
5 + 7 + 9 * (6 + 2 + 9 * (8 + 7 + 9 * 9) * 4) + 4 + 6
(6 + 5) * 2 + 9 + 3
9 + 6 + (5 * 8) + 4 + (8 + 7 * 5)
4 * 8
8 * 3 * 9 * (2 + 6 * (6 + 7) * 5 + (2 * 9 + 9 * 8 + 7 * 8)) * 8 * 3
9 * 5 + 4 + 7 * ((4 * 4 * 6 * 7 + 9 * 2) + 7 * 3) * 6
7 * (7 * 5 * 3 * 5 * 5) + 4 * 8 * 6 * 3
8 * (8 + 7 * (3 + 8 + 2 * 8 * 8 + 2) * 2 + (6 * 5 + 9 * 5 * 6 + 7) + (8 + 2)) * 4 + 3 * (2 * 7 * 9) + 8
3 + 2
6 + 6 + 4 * 4 + (9 * 9 * (3 + 5 * 3 * 4) + 6 + 3)
6 + (4 * 2 * 8 + 7 + 8) + 8 * ((9 + 6 * 3) * 2 + 5) * 4 * 9
8 + (2 * 9 * 3 * 5 + 2 + 3) * ((2 + 9 * 9 + 9 * 8) * 6 * 2 * 5)
2 + 3 + (8 * 7 * 7 * (5 + 3) * (2 + 4 + 6 + 4 * 5 + 7))
8 + (5 + 4 + 4) * ((7 * 6 * 6) * (3 * 7 + 5 + 2) + 5 + 6)
7 * (8 * 2 + 5 + (7 * 6)) * 2 + 2 + 8
8 + ((6 * 6 * 8 + 9 * 3) + (8 + 2 + 9 * 2 * 6) + 2 * 8 * 2 + 4) + 4 + 9 + ((5 * 6 * 5 + 4) + 6 + 5 * (4 + 5 + 7 * 9 * 3 + 6) + 4 + (8 * 7 + 8 + 7)) + (8 + 8 + 9 * 9)
3 + ((7 * 6 + 5) + 2 + (4 + 8 + 7 + 4 + 7 * 7)) * 2 + 4
6 * (5 + (7 * 4) + 4 * 7) * 6 * 9 * 4 * 2
5 + 8 * 2 * 7 + (9 * 8 + 7)
8 * (3 * 9 * 2 * (5 * 3 + 6 * 6 * 9) * 6)
(4 + 9 * 2 + (7 * 7 * 8 + 9) * 2) + 2 + 6
(8 + 9 * (4 + 9 + 9 * 6 + 2 + 7) + 5 * (7 * 6 + 5) * 3) + 6
4 + (9 * (3 * 6 + 9 + 3 * 6) + 7 + 3 + 4 + 5) * 6 * 9
4 + 7 * (6 + (2 + 7 * 8 * 9 + 5 * 4)) + (3 * 2 + 2 * 9 * 8 * 8)
(5 * 9 * 3 * 2 * 5) * 3 + (7 * 9) + 5 * (5 + (3 * 9) + 2 + 8 + 3)
(4 * (6 + 2 + 3 + 7 * 4 * 9)) * 8 * 5 + 4 + 9 * 8
3 + 4 + 8 * ((2 + 3 + 8) + (2 * 9 + 7 * 7) + 2 + 3 + 6 + 4) + 8
2 * 4 + 7 * (6 * 2)
7 + (8 + 7 * 9 * 9) * 4 * 8 + 8
3 * (3 + 4 + 5 + 7 + (7 * 3 + 6 + 6 + 2 + 3) * (9 * 7 * 5)) * 9 * 4 * 2
3 * 3 + 8
3 + 2 * (8 * 5 * 9 + 3 * 9) * 8 + 8 * (4 * 2 + 4)
(6 * 6 * 7 + 4) + (5 + 3 + 9 + 7 * 7)
9 * 4 * 4 * 9 + 8 + (8 * 5 * 3 + 8)
(7 * 4 * 7 + 4) * (4 * 9 * 3 * 2) + 2 + 6 + 6 + 6
5 + 7 * 2 * ((6 * 9 * 6 + 8 + 5) * 6 + 8 * 2 * 3) + 6 * 6
6 + (3 * (2 * 5 * 3) + 5 * 3) * 4 + 5 * 2
5 * (5 * 2 * 5 * (7 * 6 + 2))
9 + ((7 * 5 + 7) * 6 + (9 * 6)) * 4 * 7 * 7 + 7
7 + 4 * 2
4 + ((9 + 4) * 6) * 5 * 4
7 * (6 * 6 + 4 * 5 + 5 + 5)
6 + (9 * 6 * 8 * 9 + 7) * 9 * 3 * 6
9 + 7 * 5 * (7 * 5 * 9 + 8 + 4 * 4)
8 * 6 * (2 + (7 * 6 * 7 + 9 + 9) + (5 + 8 * 8 + 9 * 9 * 8) + (6 * 8 + 7 + 4) * 9 * 2) * (9 + 3 * 3 + 5) + 9
4 + (2 * 9 * 2) + 4 + 9 + 2 + 7
6 + (3 * 6 * (9 + 3 * 6 + 2) * 4 + (9 * 7 * 4) + 8) + 8 * 6 + (2 * 7)
7 * (2 * 2) * 9
8 + 6 * 4 + 6 * 2 + 7
3 * 3 * 8 + 3 * (8 + (4 * 4 * 6 * 4 * 6) + 6 * (7 + 5 + 4 * 6)) + 4
(7 + (8 + 7)) + (3 * (6 * 7 + 6 + 7 + 6 + 3) + 2) * 2 * 4 * 9 * 8
7 + 8 + 9 + (5 + 9 * (2 + 9 * 7 + 2) + 7 * 6 + (3 * 5 + 5 * 8 * 5)) + 9
(6 * (9 * 7 + 3 * 8 * 3 + 2) + 9 + 2 * 2) * 8 * 5 + (4 * (8 + 6 * 9 * 6 * 6) + 7 + (9 * 9 * 3 * 3 + 2 + 8) * 2) * 3 + 4
((7 * 2 * 7 * 9 * 2 + 5) * 7) * 8
(2 + (8 * 3 + 6) + 8 * 6 + 3 * 7) * 8
(6 * 2 * 2 * 4 * 3) + 5 + 7
(8 + 7 * (7 * 6 + 8) * 4) * (6 * 7 * (5 * 9 * 5 + 7 + 2 * 6))
5 * (8 + (8 + 3 + 8 * 5 + 2) * (8 + 3 + 7) + 7) + (4 + 7) * 5 + 8
(9 + 6 + 7) + (9 + 7 + 7 + (6 + 8 * 4 + 4 + 6 * 4) + 8) * ((6 + 4 + 5) * 4 * 4 + 7 * 6) + 3 + 3 * 8
(6 * 5 * (2 * 8 + 2)) * 8 + 5 + 4 + (9 * 8 + 8 + 4 + 8)
2 * 7 * ((4 * 6) + 8 * 8 + (7 * 3 * 9 + 2 + 6 * 3) + 9) + 3
2 * 7 * (2 + 2 * 6) * 9
5 * ((9 * 6 * 5) * 5 * 3) * 2
9 * (3 * 2 + (7 + 5 * 7 + 4 + 8 + 7) * 8 + 8 + 4) + 4 + (2 * 4 * 4 + 4 + (8 + 2 + 8)) + 8 + 3
(5 * 8 * 4) + 3 * 4 + 8
7 + 7 * 9 * 6 + (2 + 8 + (4 * 8 + 3))
(5 * 6 * 5 * 5 * 3 + 7) * 4 + 9
(3 + 4 * 7 + 6 + (7 + 9 * 6 + 4)) * 6
9 + (9 * 2 + (2 + 9 + 6 + 3 * 4 + 6) + (4 + 8 + 2 + 6 * 2 + 7)) * 9
4 + (5 * 8)
4 * 3 + 7 * (8 * 8 + 4) * 5
4 * 6 * 4 + (2 + 6 + 4 * (9 + 8) * (6 * 3) * (3 * 3)) + 9 + 5
5 * 5 + 6 * (9 * (9 + 3 * 7 * 6 * 6 * 3)) * 4 * 8
2 + 8 + 3 * 7 + (3 + 6 * (3 + 9) + (9 + 5 * 4 + 6 + 8 * 3))
7 + 3 * 3 + ((3 * 2 + 2 + 2 * 5 + 8) + (8 * 8 * 5 + 5) * 7 * 4 + 2) + 7
4 * 5 + 7 + 7 * (5 + 5 * 9) * 4
9 + 6 + 6 * ((2 + 2 * 8) + 8 + 3 + 3 * 9) * 4
9 + ((3 * 2) * 3) * 9 + 8 + 4
(6 + (4 * 9 * 4 + 2 + 3) * (9 + 5 + 2) + 5) + 6 * 4 + 5 * 6 + 8
3 + 8 * 9 + 3 + 5
(6 + (3 * 9 * 3 + 2 * 7 * 9) * (5 + 7 + 2 * 7 * 8)) + 2 + 8 * 2 + 7 + 2
6 * (5 * 9 + 8 + 5) * (5 + 9 * 7 + 7 * 9 * (2 + 6 * 2)) * 5
6 * ((6 * 3 + 6 * 2 + 8) + 8 + (3 + 2 * 5 * 7 * 4) + (8 + 7) + 4)
5 + ((2 * 4 + 4) + 9) + (2 * 6 + 5 + 8 * 2) + 5 * 4 * 6
(8 * 6 * 6 + 4) * 7 + 5 * (7 + 8 + (4 * 6 + 7 * 3 * 6 * 7) * (9 + 6) * 7) + 7
3 * (4 * 3 * 9 + 3 * 6) * (6 * 5) + 4 + 2 * 9
(9 * (4 + 2 * 5)) * 7 * 9 + 4
(9 * (9 * 2 * 3 * 5 + 6 * 6) + 6 + (6 * 9 * 2)) * 6 * 7
(8 + (3 + 9 * 6 * 3)) * (3 + (2 + 2 + 5) * 2 + 3) + 8 * 4 + 5 * 2
3 * 6 + (4 * 8)
(5 * 4 + 2 * (2 + 8 * 7 * 8 * 7) * 7) * (7 * 7)
6 * 9 * 2 + 2 + 6 * ((6 + 6 + 9 * 5) + 2)
6 + 8 * (5 + (9 * 3 + 3) * (9 * 9 + 3 + 6 * 3 + 2) * 5 + 4 * 4)
(5 * 3 * 5) * (3 * 4)
6 + (5 * 2 * 3 + 6) + 5 * 3
7 * (7 + 2 + 5)
(3 + 3) + 2 + (2 * 4 + 3) + 5 + (8 + 4 + 4 * 2 * 4)
5 + 4 + (9 * 3 + (7 * 9 + 6 + 3)) * 2 * (3 + 9 * 7 + 9) + 9
(6 * 8 * 6 * 2 * 3 + 9) * 3 + 2 + 7 + 9
(5 * 3) * (4 + 8 + 3 * 5)
(4 * (3 * 3 * 9 * 6 * 9) + 6 + 7) * 4 * 2
6 + (3 + 7 + 7 + 9 + 5 * 6) * (3 + (6 * 6 * 2 + 7 * 9) + (2 + 8 * 2 + 2) + (7 + 7) + 3) * (2 + 2) + 8
4 * 9 * 7 * 7 + ((4 * 3 * 9) * 6 + (7 * 8) * 3 * (5 + 9 + 9 * 8 + 6) + 8)
8 + 6 * 4
(3 * 6) * 9
((6 * 3 * 8 + 2 * 3 + 7) * 4) * 2 + 7 * 3 * 8 + (5 * 6 + 4)
8 + 4 + (4 * (6 * 7 * 9 + 7 + 3) * (2 + 7 + 7 + 5 * 6) + 6 + 7) * 3 * 3
(6 * 3 * 9 * 6 * 8) * 8 * (6 * 7) + 6
(8 + 2 + 2) * 7 * 4 + 9 * (3 + 7 + 7 + (2 * 9 * 4 * 9 * 5) * 4)
6 + 7 + (2 * 3 * 5 + 7 + 2 + 6) + 2
5 + (8 + 3) + (6 * 2 + 9 + 9 + 3) * (9 + 7 * 2 + 7 * 7 * 7)
3 * ((2 + 6 + 2 * 2 * 4) + 4 + (3 + 3 + 6) * 5 + 4) + 9 + 3 * 8 * (7 + 8 + 9 + 7 + 7)
(6 + 9 * 2 + 3 * 2) + 4 * 3 * 6 * 8 * 6
7 * ((3 * 8 + 3 + 3) + 8) * 4 * 9 * 9
4 + 4 + (8 * 4 * 9 + (2 * 9 * 6 * 3) + 6) + 2 * 7 * 5
(4 + 5 + 9 + 9 * 2 * 5) + 5 * 6 + 8 + (4 * 2 * 5 + 9)
8 + (5 + 2 + 4) + 7 + (8 + 2 + (2 * 3 * 7 * 6 * 5 * 8) * 4 + 4 * 6)
5 * 8 + 3 * (5 * 6 * (4 + 7 * 2 * 5 + 5 * 6) + 7)
6 * ((3 + 8 * 3 * 9) * 4 * 8) * 4 + 8 * 4 + 3
4 + (9 * 8 * 9 * 4 + 5 * (5 * 2 + 2)) + 8 * 2
6 + 3 + 9 + (4 * 4 + 3 * 6)
9 * 3 + (6 * 6) + 6 + 6
((2 + 3 * 3 * 4 + 4 * 4) + 8 + (8 * 2 * 5) * (7 * 3 * 2 + 4 * 7 * 9) * (3 * 6)) * 9 * 6
9 * (6 * 5 + 3 * 6 + 8 + 7) + 5 * 2
9 * ((6 * 7 * 8 + 2 + 7 * 5) + 4 * 9 + 8 * 3 + 3) + (7 * 6 * 4 + 8 * 9 + 8)
5 + ((3 + 2 * 3 * 3 + 4 * 3) * 9 * 4 + 5)
4 + 7 + (9 * 5) + 5 + (5 * 4 + 9 * 9)
9 * 6 + 2 + (3 + 7 * (9 * 4 + 7 + 2) + 7 + (7 * 9 * 5 * 6 * 6)) * 6 * 8
(6 * 2 + 7 * 2) * 6 * 9 + 3
2 + 2 + 2 * (6 * 6 + 3 * 9) + (5 * 3 + 7 * 4 + 8 * 8) * 7
(5 + 7 + 7 * (8 + 5 * 5) * 8 * 3) + ((6 * 9) + 5) + 8 + 3 * 9 * (2 * 5 * 2)
(3 + (5 * 5 * 2 * 2 + 4) + 7) + (8 * 6 * 8 * (7 + 9 + 3 + 8 + 3)) + (8 * 7) * (8 * 3 + 3 + 2 * (8 * 7 + 8 + 5) + 3) * 8
6 + ((3 + 9 + 9 + 4) * (2 + 3 + 6 * 8 * 8 + 3) + 4 + 7 * 3 + 2) + 8
(2 * 3) + 4 + 7 + (8 + 8)
3 + 6 * (6 + (5 * 9 + 3 * 8 * 6) + 5)
(8 * 5 + 7) + 2 * 4
4 * 6 * 7 * 4 * (4 * (8 + 6 + 8) + 2 * 2 * (3 + 6 * 4 + 5 * 9 + 7) + 5)
2 + ((5 + 4 * 4 + 3 + 5) * (3 * 9 + 7 * 2 * 3 * 6) * (9 * 7 + 2 * 2 + 5 * 3) + 6 + 2 * 9) * 3 + 9 * 3 * 9
6 * 3 * (7 * 8 * 7)
7 * 3 * ((6 * 2 + 9) * 3 * 3 * (9 + 2) + (7 + 5 * 5 + 6 + 5) + 6)
(5 + (9 * 7 + 9 * 6 + 3 * 5) * 7 * 9) * 5 + 8 + (6 + 3) + (6 + 9 * (6 * 7 * 5 * 3 * 5))
(3 + (6 + 9 + 7 + 6 * 8 + 7) + 3 * 5 * (7 * 3 + 8)) * 2 + 2 * 3 * 5
6 + 7 * 7 + (9 * 3 + (5 * 8 * 9 * 9) + 3) * (7 + 2)
2 + ((2 + 6 + 9 + 3) * (6 + 3) * 3) * 6 * 3
(8 + 3 * 2 * 3 + (4 * 7 + 9 * 5 * 9 * 5)) + 3 + 6 * 8
6 * (3 + 2 * 9) * 6 + 4
(5 + 6 * 8 * 8 + 4) * 4 + (7 + 5) + 9 + 2
(9 * (6 * 9 * 9 * 3 * 2 + 4) * 9 + 2 * 2 * 5) * 3 + 8 * (2 * 9 * 9 * 7 + 5) + 7
8 + 7 * ((4 * 5 * 6 + 4 + 9) * 5) + 6 * ((8 + 2 * 4 * 9 * 8) * 6 * (4 + 2 * 8 + 2) * 9 + 3 * 2)
5 * 7 + (4 * (8 + 6 + 9 * 4 + 4 + 6) * 6)
(7 * 8 * (3 + 3) * 4 * 6) * 6 + 9 * 8 * 3
5 + ((7 + 6 + 2) * 7 + (2 * 7 + 7 * 9 + 8)) * 2 * 8
((2 + 3 + 7 * 8) * 3 * (9 * 2 + 9)) + (6 * 9 * 3 * 7 + 5) * 7 * 9
(5 * (8 * 2) * 3 * (4 * 2) + 8) + 3 * (5 * 3) + (8 + 4 * 8 * (5 * 6)) + 3 * 6
2 + ((7 * 9 + 2 * 5 * 9 + 8) + (6 * 4 * 5 * 7 + 3 + 7) * 8 + 7 * (9 * 3 + 9 * 3 * 2))
5 + 6 * 6 * (5 + 9 + (5 + 6 * 4) + 8)
(7 * 8 * (8 + 2) + (3 + 9 + 4 + 8)) + (6 * (2 * 5 * 3 + 6 * 6) * 7 + 5 * 8 * (9 + 4 * 5 + 8 + 6 * 4))
(8 * 6 + 8 * 5) * 7 * 6
9 + 8 + (2 * 6 * 4 * (6 + 5 * 5) * 3 + 9) + 4
7 + 6 + (2 * (7 + 9 + 6) * 7 + 5)
(2 * (9 * 2 + 2 * 8 + 6) * 6 * 4) * 3 * 3 + ((7 * 9 + 9 + 2 + 6 + 8) * (9 * 5 * 9 + 6) + (2 * 9) * 9 + 4 + (9 * 4))
6 * (9 * 5 * 4 + 7 * 6) * 4 * 7
((8 + 6) * 5 * 2) * 9 + (7 * 8) + 9 + ((8 * 3 * 7) * 7 * 2 + 3 * 7) * 2
5 + (7 + (7 * 3 + 2 * 5 + 6) + 7) * 4 * 5 + 2 + 7
4 * 7 * ((8 + 2 * 3 + 2 * 9 * 8) + (2 * 9) * (2 * 8 + 2) * 8 + 6 * 4) + (2 * (8 * 8) * 4 + 3)
9 + 5 * (4 + 7 * 3 + 3 * 2)
6 * 9 + 3 + (6 + 6 * (4 + 6 + 8 * 7 * 5)) + 6
(5 * 4 + 4 + (4 + 6) + (5 + 7)) + 7 + 6 * 3 * (8 + 5) + (5 + 5 + (5 + 5 * 4 * 9 + 4 * 4) + 4 + 5 * 8)
9 + (4 + (3 * 7 * 7 * 3)) * 4 * (8 * 5 * 9 * 3 + 5 + 9) * 2
2 + 6 * 9 * 5 * 4
7 * (5 * 4) + 3 * 8 + 8
(8 + 3 + (3 * 4 * 4 + 9 * 5) + 7) * (3 * 2 + 9 + 7 + 9) * 6 + 6
2 * 3 * 2 + 4
(4 * (9 * 3 + 9 + 3 + 8 + 4)) * 7 + 2 * 8
7 * (2 + 5 + 9 * 6 + 5) + 4 * (6 + 2 * 2)
(6 * 7 * 5 + 5 * 2) + 9
(2 + 4 + 4) * 4 + 9 + 2 * 8
6 * 9 * (9 + (9 * 4 + 2 + 7 * 5 + 3) * 6) * 5 + 4 + 7
6 * 8 * (2 * (7 + 6 * 3 * 8) * (6 * 8 * 3))
9 * 8 * 4 + 5 + ((7 + 4 + 6 + 9 + 6) * 5 * 2) + (9 * 2 + (7 + 9 * 6) + 6)
7 + 8 * (5 * 5) * 9
7 * 2 * 9 + 6 + 9 + (3 * 9 + 8 + 8 * 9 * 5)
6 + 3 * (6 * 5 * 8 * 8) * 7
4 * (4 + 7 + 4 * (9 * 2 + 3 * 9 * 8 * 7)) * (7 * 6 * 8) + 7 + 4 * 6
5 * 7 * 6
6 * 4
8 * ((8 * 8 + 4 * 3) * 9 + 6 * 7 + 4 + (4 * 8)) * 9
((3 + 3 * 2 * 8) * 9) + 7 + 4 + 8
3 * 7 + 9 * (3 + (5 * 3 + 2))
7 + 9 + 4 * 2
2 * (6 * 6 + (2 * 8 + 4 * 5) + 4 + 5 * 6) * 2 * 8
(5 * 2 * (8 * 9 + 5 * 4 + 9 * 4) + 7) * 9 + 6
4 * 5 + 9 + 7 * 8
2 * 6 * 5 * 6
2 + 9 * (6 * 4 + 6 + (7 + 9 * 7 * 5 + 7) * 6 + (8 * 2 * 9 * 7 * 9 * 4))
5 * 2 + 4 + 5 * 9
9 + 6 + 5 + (2 * (7 + 3) + (3 * 8) * 8 * 8 * 4) + 9
3 * (2 + 8) * 2 + 3 * 9 * 2
9 + ((9 + 2 * 4 + 7) * 4 + 8) + 3 + 2 + 2 + (5 * (5 * 9 * 4 * 8 * 8 * 9) * 2 * 5)
((9 * 8 * 2 * 2 * 2 + 7) + 7 + 7) + 2 + 5 * 2
7 + (7 + 6 * 9 * 5 + 9) * 6 + 6 + (8 + 9) + 7
(7 + 6 + 5 * 5 + 6) + 2 + 2 + 2 * 2
(4 + 2 * 9 * 6 + 8 + (5 * 7)) + 6 * 8 + 3 * 5
(8 * 6) * 6 * 9 * 6 + 7
3 * 8 + (4 + (2 + 8) * (3 * 6 + 3 * 5 + 9 * 3) * (9 * 6 * 6 * 2 + 5) + (9 + 9))
4 * (4 * 8 * 6 * 8 * 3) * 2
3 + (5 * 5 * 5 * (6 * 6) * 6 + 3) + 9 * 8
9 + 5 * 3 * (2 + 3 * 6 + 4 * (6 + 7 + 6 * 6) + 4) * 8 + 9
(5 + 5) * (2 + 3 * 3 * 8 * 9 * 7) * 4 + 4 * 8 + 9
7 + (4 + 6) + 5 + 6
(8 + (6 + 8 + 2 + 9 * 6 * 7) + 2) * 8 + 6 * (3 + 5) + 2
9 + 9 * 8 * (7 + 7 * 9 + 9 + 6 + (8 * 5))
5 * 9 * 3 * 5 * 3 + ((8 + 9 + 9) * 3 * 6 + 9 + 6)
(8 * 9 + 3 * 8) * 3 + (5 + 3 * (8 * 9 + 8) * (3 + 7 + 7 + 7) * 9)
4 * 7 + 7 + (6 * (2 * 8) * 2 + 4)
(3 + 9 * 2 * (5 * 8)) * 9
3 + 3 * 6 * 2 * (9 * 9) * 6
3 * 8 + (7 + 7 + (8 + 3) + (7 * 6 * 2) + 3)
⛄"""
